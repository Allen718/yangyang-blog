(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{390:function(t,e,n){"use strict";n.r(e);var a=n(42),s=Object(a.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h2",{attrs:{id:"受控与非受控组件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#受控与非受控组件"}},[t._v("#")]),t._v(" 受控与非受控组件")]),t._v(" "),n("h3",{attrs:{id:"受控组件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#受控组件"}},[t._v("#")]),t._v(" 受控组件")]),t._v(" "),n("p",[t._v("受控组件与非受控组件一般是指在react的表单元素中，就拿input元素举例，受控组件就像vue的双向绑定一样，我们需要使用useState来初始化一个值，并且将这个值传给input元素作为它的值，然后此时我们在输入框里面写东西，发现页面毫无反应，这是因为input的value取的是state中的val。但是val的值一直是空。 改变state的唯一方式setState\n受控组件必须要在表单上使用onChange事件来绑定对应的事件.\n请看代码")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v(" const [note, setNote] = useState('在这里添加备注');\n  <input type=\"text\" \n    value={note}\n    onChange={setNote('')}//如果没有这个事件监听，那么无法更改\n    />\n")])])]),n("ul",[n("li",[t._v("在受控组件中，如果没有给输入框绑定onChange事件，将会收到react的警告")]),t._v(" "),n("li",[t._v("并且此时输入框除了默认值，是无法输入其他任何参数的")])]),t._v(" "),n("h3",{attrs:{id:"非受控组件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#非受控组件"}},[t._v("#")]),t._v(" 非受控组件")]),t._v(" "),n("p",[t._v("非受控组件即不受状态的控制，获取数据就是相当于操作DOM。\n非受控组件的好处是很容易和第三方组件结合。\n我们也不用去监听onChange事件\n请看代码")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v(' const onBlur = () => {\n    if (refInput.current !== null) {\n      setNote(refInput.current.value);\n    }\n <input type="text" \n               ref={refInput}\n               defaultValue={note}\n               onBlur={onBlur}\n        />\n')])])])])}),[],!1,null,null,null);e.default=s.exports}}]);