(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{394:function(n,e,t){"use strict";t.r(e);var r=t(42),a=Object(r.a)({},(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h2",{attrs:{id:"高阶组件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#高阶组件"}},[n._v("#")]),n._v(" 高阶组件")]),n._v(" "),t("h3",{attrs:{id:"高阶函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#高阶函数"}},[n._v("#")]),n._v(" 高阶函数")]),n._v(" "),t("ol",[t("li",[n._v("谈到高阶组件，就会自然的提一下，高阶函数，让我们来看看什么是高阶函，数高阶函数是至少满足下列条件的函数\n"),t("ul",[t("li",[n._v("接受一个或多个函数作为参数输入")]),n._v(" "),t("li",[n._v("输出一个函数\n其实这样的函数我们遇见很多，显著的就是回调函数就是呀，")])])])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("let  fn = function(x, y) {\n   return x + y;\n   }\n setTimeout(()=>{\n   console.log(hi)\n   },1000)\n")])])]),t("h3",{attrs:{id:"高阶组件-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#高阶组件-2"}},[n._v("#")]),n._v(" 高阶组件")]),n._v(" "),t("p",[n._v("类比高阶函数的定义，高阶组件就是一函数接受一个组件作为参数，在函数中对组件做一系列的处理，随后返回一个新的组件作为返回值。")]),n._v(" "),t("ol",[t("li",[n._v("抽象的东西还是用一个具体的来自来说明会更容易理解一些，请看例子")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("import React, {Component} from 'react'\nclass Home extends  Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            username: '',\n\n        }\n    }\n\n    componentWillMount() {\n        let username = localStorage.getItem('username');\n        this.setState({\n            username: username\n        })\n    }\n\n    render() {\n        return (\n            <div>欢迎 {this.state.username}</div>\n        )\n    }\n}\n\nexport default Home;\n然后再另一个组件里面\n\nimport React, {Component} from 'react'\n\nclass About extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            username: ''\n        }\n    }\n\n    componentWillMount() {\n        let username = localStorage.getItem('username');\n        this.setState({\n            username: username\n        })\n    }\n\n    render() {\n        return (\n            <div>你好 {this.state.username}</div>\n        )\n    }\n}\n\nexport default About;\n")])])]),t("p",[n._v("上面这两个组件虽然不同，但是两个组件有许多一样的代码，这样感觉就非常的多余。所以，我们就可以做一个高阶组件来整合。")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("import React, {Component} from 'react'\nexport default (WrappedComponent) => {\n   return  class NewComponent extends Component {\n        constructor() {\n            super();\n            this.state = {\n                username: ''\n            }\n        }\n        componentWillMount() {\n            let username = localStorage.getItem('username');\n            this.setState({\n                username: username\n            })\n        }\n\n        render() {\n            return <WrappedComponent username={this.state.username}/>\n        }\n    }\n\n   \n}\n")])])]),t("p",[n._v("然后分别在组件里面应用")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("import React, {Component} from 'react';\nimport wrapWithUsername from 'wrapWithUsername';\nclass Home extends Component {\n    render() {\n        return (\n            <div>欢迎 {this.props.username}</div>\n        )\n    }\n}\n\nHome = wrapWithUsername(Welcome);\n\nexport default Home;\n\n//在about组件\nimport React, {Component} from 'react';\nimport wrapWithUsername from 'wrapWithUsername';\nclass about extends Component {\n    render() {\n        return (\n            <div>goodbye {this.props.username}</div>\n        )\n    }\n}\n\nAbout= wrapWithUsername(Goodbye);\n\nexport default About;\n")])])])])}),[],!1,null,null,null);e.default=a.exports}}]);