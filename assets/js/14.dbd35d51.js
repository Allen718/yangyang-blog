(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{393:function(n,t,e){"use strict";e.r(t);var o=e(42),a=Object(o.a)({},(function(){var n=this,t=n.$createElement,e=n._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("ol",[e("li",[n._v(".sync 修饰符。它只是作为一个编译时的语法糖存在。它会被扩展为一个自动更新父组件属性的 v-on 监听器。常用与类似场景假设父亲手里有一万块，他对儿子说你可以花我这个钱，但是钱呢在我这里，儿子想要花钱怎么办，钱不在儿子身上，他必须要通知他的父亲他要花钱，让他爸爸给钱，然后他才可以成功花钱。")])]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('<template>\n<div class="app">\nApp.vue 我现在有 {{total}}\n<hr>\n<Child :money="total" v-on:update:money="total = $event" style=" border: 3px solid green;"/>\n</div>\n</template>\n<script>\nvue.components(id:\'Child\',{\ntemplate:\'\n<div class="child">\n{{money}}\n<button @click="$emit(\'update:money\', money-100)">\n<span>花钱</span>\n</button>\n</div>\',\nprops: ["money"],\n,})\nexport default {\ndata() {\nreturn { total: 10000 };\n},\n<\/script>\n<style>\n.app {\nborder: 3px solid red;\npadding: 10px;\n}\n</style>\n')])])]),e("p",[n._v("效果图")]),n._v(" "),e("p",[n._v("分析，绿框里面的数据1000不是子组件传入的，使用外部传值实现，那子组件自然是没办法修改这个数据。本例子中子组件想要通过点击花钱这个按钮来实现修改这个10000，显然直接减是做不到的，可以通过"),e("code",[n._v("this.$emit")]),n._v("去通知父组件，把要做的事情传参，父组件通过"),e("code",[n._v("$event")]),n._v("可以获取到这个消息，接收到参数信息，然后由他来修改这个数据。\n上面这种场景由于很常见，作者大大就发明了"),e("code",[n._v(':money.sync="total"')]),n._v(", 这个语法糖替代"),e("code",[n._v(':money="total" v-on:update:money="total = $event"')])])])}),[],!1,null,null,null);t.default=a.exports}}]);