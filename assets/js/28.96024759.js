(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{379:function(t,s,e){"use strict";e.r(s);var n=e(42),a=Object(n.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"toast"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#toast"}},[t._v("#")]),t._v(" Toast")]),t._v(" "),e("p",[t._v("新建一个toast组件，全局声明这个组件使之成为一个全局组件")]),t._v(" "),e("ol",[e("li",[t._v("如何调用这个toast组件的两种办法")])]),t._v(" "),e("ul",[e("li",[t._v("方法一\n在toast组件里面，增加Vue的共有属性，一旦这个组件成为全局组件，所有的Vue实例都可以有这个属性")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("  import Vue from 'vue'\n  Vue.prototype.$toast=function(){\n    console.log('hi')\n  }\n")])])]),e("p",[t._v("缺点 直接修改vue的共有属性，会有一些问题也许先前已经声明了一个叫做toast的方法\n引入Vue，这个vue的版本也会有问题\n最好的办法使用vue的自定义插件")]),t._v(" "),e("ul",[e("li",[t._v("新建一个plugin.js文件")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v(" export default{\n install(Vue,options){\n   Vue.prototype.$toast=function(message){\n   console.log(message)\n   }\n }\n}\n全局声明一下使用\nimport plugin from './plugin.js'\nVue.use(plugin)\n")])])]),e("p",[t._v("然后就可以在各个组件里面通过this.$toast来调用此函数。\n方法二是更经常采用的方法，用户自己的清楚到底做了什么\n动态生成一个vue组件")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v(" Vue.prototype.$toast=function(message){\n  let Constructor=Vue.extend(Toast)\n      let toast=new Constructor\n      toast.$slots.default=[message]//保证顺序\n      toast.$mount()\n      document.body.appendChild(toast.$el)\n    }\n")])])]),e("p",[t._v("然后vue组件开始正常写")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v(" <template>\n  <div class=\"toast\">\n    <slot></slot>\n  </div>\n </template>\n <script>\n  export default {\n    name: 'GuluToast'\n  }\n <\/script>\n")])])]),e("p",[t._v("组件的css可以参考其他组件库样式")]),t._v(" "),e("h3",{attrs:{id:"自动关闭"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#自动关闭"}},[t._v("#")]),t._v(" 自动关闭")]),t._v(" "),e("p",[t._v("一般弹窗都会自动关闭，所以实现自动关闭功能")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("props: {\n      autoClose: {\n        type: Boolean,\n        default: true\n      },\n      autoCloseDelay: {\n        type: Number,\n        default: 50\n      },\n}\n  mounted () {\n      this.execAutoClose()\n    },\n methods: {\n     execAutoClose () {\n        if (this.autoClose) {\n          setTimeout(() => {\n          this.$el.remove()\n           this.$destroy()\n          }, this.autoCloseDelay * 1000)\n        }\n      },\n }\n")])])]),e("h3",{attrs:{id:"手动关闭"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#手动关闭"}},[t._v("#")]),t._v(" 手动关闭")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('   Vue.prototype.$toast = function (message, toastOptions) {\n   let Constructor = Vue.extend(Toast)\n     let toast = new Constructor({\n       propsData: {\n         closeButton:  {\n           text: \'关闭\', callback(){\n               console.log(\'用户说他知道啦\')\n           }\n         }\n       }\n     })\n     toast.$slots.default = [message]\n     toast.$mount()\n     document.body.appendChild(toast.$el)\n   }\n <div class="line" ref="line"></div>\n   <span class="close" v-if="closeButton" @click="onClickClose">\n     {{closeButton.text}}\n   </span>\ncloseButton: {\n       type: Object,//如果为对象，默认值变成返回函数\n       default () {\n         return {\n           text: \'关闭\', callback: undefined\n         }\n       }\n     },\n onClickClose () {\n       this.close()//关闭\n       if (this.closeButton && typeof this.closeButton.callback === \'function\') {\n         this.closeButton.callback(this)//this === toast实例\n       }\n     }\n   }\n')])])]),e("h3",{attrs:{id:"支持html选项"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#支持html选项"}},[t._v("#")]),t._v(" 支持html选项")]),t._v(" "),e("p",[t._v("由于slot不支持 v-html,而我们又想要支持这个功能所以")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v(' <slot v-if="!enableHtml"></slot>\n<div v-html="$slots.default[0]" v-else></div>\n enableHtml: {\n        type: Boolean,\n        default: false,\n      },\n\n')])])]),e("p",[t._v("由于我们不知道弹框的内容是到底多大，所以高度使用最小高度，只要高度不固定那么子元素使用高度100%就会出现问题。为了所以需要解决先前写css样式的时候那条白线消失了，所以只好强制使用js将白线做出来")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v(" updateStyle() {\n        this.$nextTick(() => {\n          this.$refs.line.style.height = `${this.$refs.toast.getBoundingClientRect().height}px`\n        })\n      }\n\n")])])]),e("h3",{attrs:{id:"position位置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#position位置"}},[t._v("#")]),t._v(" position位置")]),t._v(" "),e("p",[t._v("添加类名")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("   position: {\n        type: String,\n        default: 'top',\n        validator (value) {\n          return ['top', 'bottom', 'middle'].indexOf(value) >= 0\n        }\n    computed: {\n      addClass() {\n        return {[`position-${this.position}`]: true}\n      }\n    },\n")])])]),e("p",[t._v("实现只能一个toast\n假设我们不停的点击出现弹框按钮那么就会创建很多虽然位置重叠，但是这个也是不可取的，我们应该实现当第二次点击弹窗的时候把第一次的干掉，然后再新创建")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("import Toast from \"./Toast\"\nfunction createToast({Vue, message, propsData,onClose}) {\n  let Constructor = Vue.extend(Toast)\n  let toast = new Constructor({propsData})\n  toast.$slots.default = [message]\n  toast.$mount()\n  toast.$on('close',onClose)//当用户自己里面关闭了，我们在外面就不关闭\n  document.body.appendChild(toast.$el)\n   return toast\n\n}\n\nlet currentToast\nexport default {\n  install(Vue, options) {\n    Vue.prototype.$toast = function (message, ToastOptions) {\n      if (currentToast) {\n      currentToast.closeToast()\n        currentToast = createToast({Vue, message, propsData:ToastOptions,onClose:()=>{\n            currentToast=null\n          }})\n      } else {\n        currentToast = createToast({Vue, message, propsData:ToastOptions,onClose:()=>{\n          currentToast=null\n          }})\n      }\n\n    }\n  }\n}\n")])])]),e("h3",{attrs:{id:"实现进入动画"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#实现进入动画"}},[t._v("#")]),t._v(" 实现进入动画")]),t._v(" "),e("p",[t._v("实现动画的过程中会出现bug，因为我们使用了translateX后面有用translateY覆盖以后,会让动画出现问题\n所以最好使用一个容器专门做样式，另一个容器专门做动画。")])])}),[],!1,null,null,null);s.default=a.exports}}]);