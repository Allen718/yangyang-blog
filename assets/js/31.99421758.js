(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{368:function(e,t,n){"use strict";n.r(t);var s=n(42),a=Object(s.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h2",{attrs:{id:"手风琴组件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#手风琴组件"}},[e._v("#")]),e._v(" 手风琴组件")]),e._v(" "),n("p",[e._v("手风琴组件就是一个具有折叠功能的面板，折叠面板有两种模式，一种就是每次只允许点开一项，还有一种就是可以同时展开多项。")]),e._v(" "),n("h3",{attrs:{id:"书写html和css"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#书写html和css"}},[e._v("#")]),e._v(" 书写html和css")]),e._v(" "),n("p",[e._v("css样式就不展开了，可以参考其他ui组件库样式")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<template>\n  <div class="collapseItem">\n    <div class="title" @click="open=!open">\n      {{title}}\n    </div>\n    <div class="content" v-if="open">\n      <slot></slot>\n    </div>\n  </div>\n</template>\nscript>\n  export default {\n    name: "GuluCollapseItem",\n    props: {\n        name:{\n            type:String,\n            required:true\n        }\n      title: {\n        type: String,\n        required: true\n      }\n    },\n    data () {\n      return {\n        open: false\n      }\n    }\n  }\n<\/script>\n\n')])])]),n("h3",{attrs:{id:"单项展开功能实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#单项展开功能实现"}},[e._v("#")]),e._v(" 单项展开功能实现")]),e._v(" "),n("p",[e._v("单项展开功能实现，每次只能展开一项的关键就是当我没有展开时，点击展开，当点击另一项的展开的时候要把上一项关闭，这涉及到兄弟组件通信，使用eventbus,在父组件collapse中创建一个eventbus")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("props: {\n      single: {\n        type: Boolean,\n        default: false\n      }\n    },\n    data () {\n      return {\n        eventBus: new Vue()\n      }\n    },\n    provide () {\n      if (this.single) {\n        return {\n          eventBus: this.eventBus\n        }\n      }\n    }\n      mounted () {\n      this.eventBus.$on('update:selected', (name) => {\n        this.$emit('update:selected', name)\n      })\n\n    子组件\n    inject: ['eventBus'],\n    mounted () {\n      this.eventBus && this.eventBus.$on('update:selected', (vm) => {\n        if (vm !== this) {\n          this.close()\n        }\n      })\n    },\n    methods: {\n      toggle () {\n        if (this.open) {\n          this.open = false\n        } else {\n          this.open = true\n          this.eventBus && this.eventBus.$emit('update:selected', this)\n        }\n      },\n      close () {\n        this.open = false\n      }\n    },\n  }\n<\/script>\n")])])]),n("h3",{attrs:{id:"支持默认打开"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#支持默认打开"}},[e._v("#")]),e._v(" 支持默认打开")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("在collapse组件里面\n  selected: {\n        type: String,\n      }\n      mounted () {\n      this.eventBus.$emit('update:selected', this.selected)\n      this.eventBus.$on('update:selected', (name) => {\n        this.$emit('update:selected', name)\n      })\n    }\n    在collapse-item 组件里面\n     mounted () {\n      this.eventBus && this.eventBus.$on('update:selected', (name) => {\n        if (name !== this.name) {\n          this.close()\n        } else {\n         this.open = true\n        }\n      })\n")])])]),n("h3",{attrs:{id:"改变selected类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#改变selected类型"}},[e._v("#")]),e._v(" 改变selected类型")]),e._v(" "),n("p",[e._v("支持默认实现以后，发现多项展开失效了，所以需要将selected重新设计一下，变成一个数组，并且将展开，关闭全都交给父组件来统一控制")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v(" mounted () { \n     this.eventBus.$on('update:addSelected', (name) => {\n       let selectedCopy = JSON.parse(JSON.stringify(this.selected))\n       if (this.single) {\n         selectedCopy = [name]\n       } else {\n         selectedCopy.push(name)\n       }\n       this.eventBus.$emit('update:selected', selectedCopy)\n       this.$emit('update:selected', selectedCopy)\n     })\n     this.eventBus.$on('update:removeSelected', (name) => {\n       let selectedCopy = JSON.parse(JSON.stringify(this.selected))\n       let index = selectedCopy.indexOf(name)\n       selectedCopy.splice(index, 1)\n       this.eventBus.$emit('update:selected', selectedCopy)\n       this.$emit('update:selected', selectedCopy)\n       子组件里面\n    methods: {\n     toggle() {\n       if (this.open === false) {\n         this.eventBus && this.eventBus.$emit(\"add:selected\", this.name)\n       } else {\n         this.eventBus.$emit('remove:selected',this.name)\n          this.open = false\n       }\n     }\n   },\n   mounted() {\n     this.eventBus && this.eventBus.$on(\"update:selected\", (names) => {\n       if (names.indexOf(this.name)>=0) {\n         this.open=true\n       }else{\n         this.open=false\n       }\n     })\n   }\n")])])])])}),[],!1,null,null,null);t.default=a.exports}}]);