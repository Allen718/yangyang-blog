(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{363:function(e,t,n){"use strict";n.r(t);var a=n(42),s=Object(a.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h2",{attrs:{id:"收集记账页面的数据，"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#收集记账页面的数据，"}},[e._v("#")]),e._v(" 收集记账页面的数据，")]),e._v(" "),n("p",[e._v("我们应该对每次记账的数据进行保存，首先在Money.vue组件里面定义一个数据，并声明类型，然后定义好这些组件需要接受的初始值，当各组件的只改变，就传递给外面，然后外面修改并保存。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v(" const [selected, setSelected] = useState({\n  tags: [] as string[],\n  note: '',\n  category: '-' as Category,\n  amount: 0\n});\n  {selected.tags.join(',')}\n    <hr/>\n    {selected.note}\n    <hr/>\n    {selected.category}\n    <hr/>\n    {selected.amount}\n    <TagsSection value={selected.tags}\n                 onChange={(tags) => setSelected({\n                   ...selected,\n                   tags: tags\n                 })}/>\n    <NoteSection value={selected.note}\n                 onChange={(note) => {\n                   setSelected({\n                     ...selected,\n                     note: note\n                   });\n                 }}/>\n    <CategorySection value={selected.category}\n                     onChange={(category) => {\n                       setSelected({\n                         ...selected,\n                         category: category\n                       });\n                     }}\n    />\n    <NumberPadSection value={selected.amount}\n                      onChange={(amount) => {\n                        setSelected({\n                          ...selected,\n                          amount: amount\n                        });\n                      }}\n                      onOk={() => {}}\n            />\n")])])]),n("h3",{attrs:{id:"catagorysection部分"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#catagorysection部分"}},[e._v("#")]),e._v(" catagorysection部分")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("     type Props = {\n              value: '-' | '+',\n              onChange: (value: '-' | '+') => void;\n                   }\n     const CategorySection: React.FC<Props> = (props) => {\n       const categoryMap = {'-': '支出', '+': '收入'};\n       const [categoryList] = useState<('+' | '-')[]>(['-', '+']);\n       const category = props.value;\nreturn (\n <Wrapper>\n   <ul>\n     {categoryList.map(c =>\n       <li key={c}\n           className={category === c ? 'selected' : ''}\n             onClick={() => {props.onChange(c);}}\n       >{categoryMap[c]}\n       </li>\n     )}\n\n")])])]),n("h3",{attrs:{id:"notesection部分："}},[n("a",{staticClass:"header-anchor",attrs:{href:"#notesection部分："}},[e._v("#")]),e._v(" Notesection部分：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("type Props = {\nvalue: string;\nonChange: (value: string) => void;\n}\nconst NoteSection: React.FC<Props> = (props) => {\nconst note = props.value\nconst refInput = useRef<HTMLInputElement>(null);\nconst onBlur = () => {\n  if (refInput.current !== null) {\n    setNote(refInput.current.value);\n    props.onChange(refInput.current.value);\n  }\n};\n      \n")])])]),n("h3",{attrs:{id:"numberpadsection部分："}},[n("a",{staticClass:"header-anchor",attrs:{href:"#numberpadsection部分："}},[e._v("#")]),e._v(" NumberPadSection部分：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v(" type Props = {\n value: number;\n onChange: (value: number) => void;\n onOk?: () => void;\n}\n const NumberPadSection: React.FC<Props> = (props) => {\n const output = props.value.toString();\n const setOutput = (output: string) => {\n   let value;\n   if (output.length > 16) {\n       value = parseFloat(output.slice(0, 16));\n   } else if (output.length === 0) {\n         value = 0;\n   } else {\n     value = parseFloat(output);\n   }\n \n   props.onChange(value);\n };\n const onClickButtonWrapper = (e: React.MouseEvent) => {\n   const text = (e.target as HTMLButtonElement).textContent;\n   if (text === null) {return;}\n   if (text === 'OK') \n     if (props.onOk) {props.onOk();}\n     return;\n   }\n       \n")])])]),n("h3",{attrs:{id:"tagssection部分"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#tagssection部分"}},[e._v("#")]),e._v(" TagsSection部分:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v(" type Props = {\nvalue: string[];\nonChange: (selected: string[]) => void;\n}\nconst TagsSection: React.FC<Props> = (props) => {\nconst [tags, setTags] = useState<string[]>(['衣', '食', '住', '行']);\nconst selectedTags = props.value;\n   const onToggleTag = (tag: string) => {\n  const index = selectedTags.indexOf(tag);\n  if (index >= 0) {\n    // 如果 tag 已被选中，就复制所有没有被选中的 tag，作为新的 selectedTag\n    props.onChange(selectedTags.filter(t => t !== tag));\n  } else {\n    props.onChange([...selectedTags, tag]);\n  }\n};\n")])])]),n("p",[e._v("根据我与重复不共戴天的原理，在Money.tsx里面。每一个子组件的onchange函数都是相同的，所以我们需要简化一下，将onchang函数做成一个公用的函数，然后数据就统通过参数的形式改变。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("  const onChange = (obj: Partial<typeof selected>) => {\n  setSelected({...selected, ...obj});\n};\n   <TagsSection value={selected.tags} \n      onChange={tags => onChange({tags})}/>\n")])])]),n("p",[e._v("其他同理。")])])}),[],!1,null,null,null);t.default=s.exports}}]);