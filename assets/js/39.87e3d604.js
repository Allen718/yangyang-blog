(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{369:function(a,t,e){"use strict";e.r(t);var n=e(42),s=Object(n.a)({},(function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h3",{attrs:{id:"label页面的制作"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#label页面的制作"}},[a._v("#")]),a._v(" label页面的制作")]),a._v(" "),e("ol",[e("li",[a._v("新建页面Tags.tsx,")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("import Layout from '../components/Layout';\nimport React from 'react';\nimport React, {useState} from 'react';\nimport {useTags} from 'useTags';\nfunction Tags:React.FC=(props)=> {\n const {tags, setTags} = useTags();\n return (\n   <Layout>\n     <h2>标签页面</h2>\n     <ol>\n       {tags.map(tag =>\n         <li key={tag}>{tag}</li>\n       )}\n     </ol>\n   </Layout>\n );\n}\n")])])]),e("ol",{attrs:{start:"2"}},[e("li",[a._v("书写tagList的样式，首先把html的结构想好并写好，然后再添加样式")])]),a._v(" "),e("ul",[e("li",[a._v("html结构")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('function Tags() {\n  const {tags, setTags} = useTags();\n  return (\n    <Layout>\n        <TagList>\n        {tags.map(tag =>\n           <li key={tag}>\n            <span className="oneLine">{tag}</span>\n            <Icon name="right"/>\n          </li>\n        )}\n       </TagList>\n      <Center>\n        <Space/>\n        <Space/>\n        <Space/>\n        <Button>新增标签</Button>\n      </Center>\n    </Layout>\n  );\n}\n')])])]),e("ul",[e("li",[a._v("书写css样式，css样式表根据设计稿做就好，只需要考虑一下各种情况。如果想要一行内容由于太多然后想要隐藏并出现省略号的样式可以做样来实现。")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v(".oneLine {\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n")])])]),e("ol",{attrs:{start:"3"}},[e("li",[a._v("标签的编辑\n标签页面做好了，还有一个标签编辑页面，我们希望当我们点击标签时跳到标签编辑页面，所以需要添加路径，新建标签编辑页面组件")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('<Route exact path="/tags/:tag">//意思就是只要跳到"/tags/xxx"都算跳到EditTag页面，exact代表精准匹配。\n            <EditTag/>\n          </Route>\n EditeTag组件          \nimport React from \'react\';\nconst Tag: React.FC = () => {\n  return (\n    <div>hi</div>\n  );\n};\nexport {Tag};\n')])])]),e("p",[a._v("Tags.tsx使用link页面跳转，页面的样式会改变，记得调整css")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('   <Link to={/tags/ + tag}>\n              <span className="oneLine">{tag}</span>\n              <Icon name="right"/>\n   </Link>\n')])])]),e("ol",{attrs:{start:"4"}},[e("li",[a._v("修改tags的类型，tagst的类型使用字符串的数字不能满足EditTag对tag修改的需求，所以需要改造这个tags的数组，才可以在后期来修改或是删除这个tags.")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v(" const [tags, setTags] = useState<{ id: number; name: string }[]>([\n {id: 1, name: '衣'},\n {id: 2, name: '食'},\n {id: 3, name: '住'},\n {id: 4, name: '行'},\n]);\nreturn {tags, setTags};\n};\n")])])]),e("p",[a._v("由于每个标签都有了id,所以在先前的选中标签的书据修改一下\n将tags: [] as string[]改为tagIds: [] as number[],\n<TagsSection value={selected.tagIds}\nonChange={(tagIds)=>onChange({tagIds})}/>\n在TagsSection组件里面将所有用到tags的地方重构.")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("5. 创建createId，让id自增，不能重复，新建一个createId.tsx文件\n")])])]),e("p",[a._v("let id = 0;\nconst createId = ():number => {\nid += 1;\nreturn id;\n};\nexport {createId};\n使用\nimport {createId} from 'lib/createId';\n{id: createId(), name: '衣'},\n{id: createId(), name: '食'},\n{id: createId(), name: '住'},\n{id: createId(), name: '行'},")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("\n")])])])])}),[],!1,null,null,null);t.default=s.exports}}]);