(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{365:function(t,n,e){"use strict";e.r(n);var a=e(42),s=Object(a.a)({},(function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"记账页面"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#记账页面"}},[t._v("#")]),t._v(" 记账页面")]),t._v(" "),e("h3",{attrs:{id:"money-tsx-的ui-完成"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#money-tsx-的ui-完成"}},[t._v("#")]),t._v(" Money.tsx 的UI 完成")]),t._v(" "),e("ol",[e("li",[t._v("根据设计稿，将TagsSection的结构先搞清楚，然后就开始写HTML，然后写css")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v(" <TagsSection>\n        <ol>\n          <li>衣</li>\n          <li>食</li>\n          <li>住</li>\n          <li>行</li>\n        </ol>\n        <button>新增标签</button>\n      </TagsSection>\n      const TagsSection = styled.section`\n  background: #FFFFFF; padding: 12px 16px;\n  > ol { margin: 0 -12px;\n    > li{\n       background: #D9D9D9; border-radius: 18px;\n       display:inline-block; padding: 3px 18px; \n       font-size: 14px; margin: 8px 12px;\n    }\n  }\n  > button{\n    background:none; border: none; padding: 2px 4px;\n    border-bottom: 1px solid #333; color: #666;\n    margin-top: 8px;\n  }\n`;\n")])])]),e("ol",{attrs:{start:"2"}},[e("li",[t._v("由于ui主要就是完成设计稿的样式，就不用一一叙述，就自己看看源码就可以了，重点讲讲需要注意或掌握的地方就可以。在制作数字面板的时候需要用到浮动，为了清楚浮动，我们需要给浮动元素的父元素加上clearfix,具体如下")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v(".clearfix::after {\n  content: '';\n  display: block;\n  clear: both;\n}\n")])])]),e("ol",{attrs:{start:"3"}},[e("li",[t._v("写完组件的ui以后，我们会发现，一屏没有占满，我们希望将多余的空间全都留给Tags 部分，那就需要调整css布局，需要将layout的content部分为flex布局然后，采用flex-grow完成。可以这样做,不过这样写就不可以在组件里面直接写css了，而是引入一个css文件。")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("function Money() {\n  return {\n    <Layout className='xxx'>\n   然后在layout里面\n   const Layout = (props: any) => {\n  return (\n    <Wrapper>\n      <Main className={props.className}>\n        {props.children}\n      </Main>\n      <Nav/>\n    </Wrapper>\n  );\n};\n")])])]),e("p",[t._v("方法二 ,styled components支持任何类型的组件，也就意味着自定义的也可以，代码改动如下。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("const MyLayout = styled(Layout)`\n  display:flex;\n  flex-direction: column;\n`\nfunction Money() {\n  return {\n    <MyLayout>\n      <TagsSection>\n        <ol>\n          <li>衣</li>\n")])])]),e("ol",{attrs:{start:"4"}},[e("li",[t._v("ui基本完成，由于尽量不要使得一个组件里面文件过大，我们需要模块化这个Money.tsx这个里面的各个模块是得成为独立的组件。")])]),t._v(" "),e("h3",{attrs:{id:"money-tsx-的功能实现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#money-tsx-的功能实现"}},[t._v("#")]),t._v(" Money.tsx 的功能实现")]),t._v(" "),e("h4",{attrs:{id:"完成标签的选择和新增"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#完成标签的选择和新增"}},[t._v("#")]),t._v(" 完成标签的选择和新增")]),t._v(" "),e("p",[t._v("使用函数创建组件"),e("code",[t._v("const TagsSection: React.FC = (props) => {}")]),t._v(",首先我们需要有标签这个数据，还得有修改标签和读取标签这两个功能，然后在一次记账过程中还得需要有选中标签这个数据")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("const [tags, setTags] = useState<string[]>(['衣', '食', '住', '行']);\n const [selectedTags, setSelectedTags] = useState<string[]>([]);\n const onAddTag = () => {\n   const tagName = window.prompt('新标签的名称为');\n   if (tagName !== null) {\n     setTags([...tags, tagName]);\n   }\n };\n const onToggleTag = (tag: string) => {\n   const index = selectedTags.indexOf(tag);\n   if (index >= 0) {\n     // 如果 tag 已被选中，就复制所有没有被选中的 tag，作为新的 selectedTag\n     setSelectedTags(selectedTags.filter(t => t !== tag));\n   } else {\n     setSelectedTags([...selectedTags, tag]);\n   }\n };\n const getClass = (tag: string) => selectedTags.indexOf(tag) >= 0 ? 'selected' : '';\n return (\n   <Wrapper>\n     <ol>\n       {tags.map(tag =>\n         <li key={tag} onClick={\n           () => {onToggleTag(tag);}\n         } className={getClass(tag)}\n         >{tag}</li>\n       )}\n     </ol>\n     <button onClick={onAddTag}>新增标签</button>\n   </Wrapper>\n );\n")])])]),e("h4",{attrs:{id:"完成备注的功能"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#完成备注的功能"}},[t._v("#")]),t._v(" 完成备注的功能")]),t._v(" "),e("p",[t._v("首先使用ref获取到这个input元素，然后对它事件监听")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('const NoteSection: React.FC = () => {\nconst [note, setNote] = useState(\'\');\nconst refInput = useRef<HTMLInputElement>(null);\nconst onBlur = () => {\n  if (refInput.current !== null) {\n    setNote(refInput.current.value);\n  }\n};\nreturn (\n  <Wrapper>\n    <label>\n      <span>备注</span>\n      <input type="text" placeholder="在这里添加备注"\n             ref={refInput}\n             defaultValue={note}\n             onBlur={onBlur}\n      />\n    </label>\n  </Wrapper>\n);\n};\n')])])]),e("h4",{attrs:{id:"category-切换功能实现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#category-切换功能实现"}},[t._v("#")]),t._v(" category 切换功能实现")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("const CategorySection: React.FC = () => {\nconst categoryMap = {'-': '支出', '+': '收入'};\nconst [categoryList] = useState<('+' | '-')[]>(['-', '+']);\nconst [category, setCategory] = useState('-');\nreturn (\n  <Wrapper>\n    <ul>\n      {categoryList.map(c =>\n        <li className={category === c ? 'selected' : ''}\n            onClick={() => {setCategory(c);}}\n        >{categoryMap[c]}\n        </li>\n      )}\n    </ul>\n  </Wrapper>\n);\n};\n")])])]),e("h4",{attrs:{id:"numberpad-功能实现，"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#numberpad-功能实现，"}},[t._v("#")]),t._v(" numberPad 功能实现，")]),t._v(" "),e("p",[t._v("首先很确定在面板显示的是字符串，而不会是数字，因为数字不会出现'0.'这种状态。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("const NumberPadSection: React.FC = () => {\nconst onClickButtonWrapper = (e: React.MouseEvent) => {\nconst [output, _setOutput] = useState('0');\nconst setOutput = (output: string) => {\n  if (output.length > 16) {\n    output = output.slice(0, 16);\n  } else if (output.length === 0) {\n    output = '0';\n  }\n  _setOutput(output);\n};\n  const text = (e.target as HTMLButtonElement).textContent;\n  if (text === null) {return;}\n  switch (text) {\n    case '0':\n    case '1':\n    case '2':\n    case '3':\n    case '4':\n    case '5':\n    case '6':\n    case '7':\n    case '8':\n    case '9':\n      if (output === '0') {\n        setOutput(text);\n      } else {\n        setOutput(output + text);\n      }\n      break;\n case '.':\n      if (output.indexOf('.') >= 0) {return;}\n      setOutput(output + '.');\n      break;\n    case '删除':\n      if (output.length === 1) {\n        setOutput('');\n      } else {\n        setOutput(output.slice(0, -1));\n      }\n      break;\n    case '清空':\n    setOutput('');\n      break;\n    case 'OK':\n    \n      break;\n  }\n};\nreturn (\n  <Wrapper>\n    <div className=\"output\">\n      {output}\n    </div>\n    <div className=\"pad clearfix\" onClick={onClickButtonWrapper}>\n      <button>1</button>\n      <button>2</button>\n      <button>3</button>\n      <button>删除</button>\n      <button>4</button>\n      <button>5</button>\n      <button>6</button>\n      <button>清空</button>\n      <button>7</button>\n      <button>8</button>\n      <button>9</button>\n      <button className=\"ok\">OK</button>\n      <button className=\"zero\">0</button>\n      <button className=\"dot\">.</button>\n    </div>\n  </Wrapper>\n);\n};\n")])])]),e("h4",{attrs:{id:"模块化思想"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#模块化思想"}},[t._v("#")]),t._v(" 模块化思想")]),t._v(" "),e("p",[t._v("由于这个文件内容太多，代码不方便阅读，所以将组件的样式单独抽出来为一个文件夹，再将输入面板的操作，封装成一个单独的函数")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v(" const generateOutput = (text: string, output = '0') => {\n switch (text) {\n   case '0':\n   case '1':\n   case '2':\n   case '3':\n   case '4':\n   case '5':\n   case '6':\n   case '7':\n   case '8':\n   case '9':\n     if (output === '0') {\n       return text;\n     } else {\n       return output + text;\n     }\n   case '.':\n     if (output.indexOf('.') >= 0) {return output;}\n     return output + '.';\n   case '删除':\n     if (output.length === 1) {\n       return '';\n     } else {\n       return output.slice(0, -1) || '';\n     }\n   case '清空':\n     return '';\n   default:\n     return '';\n }\n};\nexport {generateOutput};\n")])])]),e("p",[t._v("基本这个记账的页面就好了，后续有一些问题，慢慢发现，慢慢修改。")])])}),[],!1,null,null,null);n.default=s.exports}}]);