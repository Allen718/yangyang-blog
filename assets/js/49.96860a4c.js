(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{357:function(t,e,a){"use strict";a.r(e);var n=a(42),s=Object(n.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"制作标签编辑页面"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#制作标签编辑页面"}},[t._v("#")]),t._v(" 制作标签编辑页面")]),t._v(" "),a("h3",{attrs:{id:"样式制作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#样式制作"}},[t._v("#")]),t._v(" 样式制作")]),t._v(" "),a("ol",[a("li",[t._v("已经成功的拿到了需要编辑标签的信息，现在可以开始制作编辑标签页面了。")]),t._v(" "),a("li",[t._v("根据设计图知道，标签编辑页面和首页的notes组件很类似，尝试改造记账页面notes组件，使之成为通用组件,让notes接受外部数据，稍作修改就可以了")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v(' <div>\n    <label class="notes">\n      <span class="name">{{this.fieldName}}</span>\n      <input type="text"\n             @input="onValueChanged($event.target.value)"\n          :placeholder="this.placeholder">\n    </label>\n  </div>\n   @Prop({required: true}) fieldName!: string;\n    @Prop() placeholder?: string;\n    @Prop({default: \'\'}) value!: string;\n')])])]),a("p",[t._v("修改引用到这个组件的组件，将原先的数据替换成外部传入数据，还有一些样式上的微调。")]),t._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[t._v("制作button按钮，由于button 按钮在一个应用里面会多次出现，并且理论上，所有的按钮基本上格式应该一致，所以可以将button按钮单独做成一个组件，样式也封装好，谁用谁引入即可。\n。")]),t._v(" "),a("li",[t._v("完善标签编辑页面的顶部导航条。")])]),t._v(" "),a("h3",{attrs:{id:"功能实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#功能实现"}},[t._v("#")]),t._v(" 功能实现")]),t._v(" "),a("ol",[a("li",[t._v("编辑标签，删除标签")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v(' <Icon class="leftIcon" name="left" @click="goBack"/>\n goBack() {\n           this.$router.back();\n    }\n <FormItem :value="tag.name"   @update:value="update" \n field-name="标签名" placeholder="请输入标签名"/>\n  update(name: string) {\n      if (this.tag) {\n        tagListModel.update(this.tag.id, name);\n      }\n    }\n <Button @click="remove">删除标签</Button>\n    remove() {\n      if (this.tag) {\n        tagListModel.remove(this.tag.id);\n      }\n    }\n tag?: { id: string, name: string } = undefined;\n  created() {\n      const id = this.$route.params.id;\n      tagListModel.fetch();\n      const tags = tagListModel.data;\n      const tag = tags.filter(t => t.id === id)[0];\n      if (tag) {\n        this.tag = tag;\n      } else {\n        this.$router.replace(\'/404\');\n      }\n      }\n 在tagList.ts标签数据管理里面增加更新和删除标签的api\n       update(id, name) {\n    const idList = this.data.map(item => item.id);\n    if (idList.indexOf(id) >= 0) {\n      const names = this.data.map(item => item.name);\n      if (names.indexOf(name) >= 0) {\n        return \'duplicated\';\n      } else {\n        const tag = this.data.filter(item => item.id === id)[0];\n        tag.name = name;\n        this.save();\n        return \'success\';\n      }\n    } else {\n      return \'not found\';\n    }\n  },\n  remove(id: string) {\n    let index = -1;\n    for (let i = 0; i < this.data.length; i++) {\n      if (this.data[i].id === id) {\n        index = i;\n        break;\n      }\n    }\n    this.data.splice(index, 1);\n    this.save();\n    return true;\n  },\n')])])]),a("h3",{attrs:{id:"解决id生成问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解决id生成问题"}},[t._v("#")]),t._v(" 解决id生成问题")]),t._v(" "),a("p",[t._v("解决id问题，由于id先前时直接将标签名，就作为id名，这样是不对的，简单写一个id生成函数来自动生成id,新建一个叫createId.ts.")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("let id: number = parseInt(window.localStorage.getItem('_idMax') || '0') || 0;\n\nfunction createId() {\n  id++;\n  return id;\n}\n\nexport default createId; \n使用时\nconst id = createId().toString();\n    this.data.push({id, name: name});\n")])])]),a("h3",{attrs:{id:"回退"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#回退"}},[t._v("#")]),t._v(" 回退")]),t._v(" "),a("p",[t._v("在删除标签时如果删除成功以后应该回到上一个页面，需要重新写一下删除函数，然后标签编辑页面基本完成")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("  remove() {\n    if (this.tag) {\n      tagListModel.remove(this.tag.id);\n      if (tagListModel.remove(this.tag.id)) {\n        this.$router.back();\n      } else {\n        window.alert('删除失败');\n      }\n    }\n  }\n")])])])])}),[],!1,null,null,null);e.default=s.exports}}]);