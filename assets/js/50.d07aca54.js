(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{356:function(t,a,e){"use strict";e.r(a);var n=e(42),s=Object(n.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"csss书写"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#csss书写"}},[t._v("#")]),t._v(" csss书写")]),t._v(" "),e("p",[t._v("开始书写label页面，根据设计图，将label页面的外观先做出来，遵循先写HTML，再写css,后js.label页面布局简单就，css样式就根据设计稿就可以，主要看功能实现过程，首先拿到保存在数据库里的标签，然后渲染在页面,然后再来一个新增按钮，绑定点击事件，进行标签的新增")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v(' tagListModel.fetch();\n  tags = tagListModel.data;\n   <ol class="tags">\n      <li v-for="tag in tags" :key="tag">\n        <span>{{tag}}</span>\n        <Icon name="right"/>\n      </li>\n    </ol>\n    新增标签\n    <div class="createTag-wrapper">\n      <button class="createTag" @click="createTag">新建标签</button>\n    </div>\n     createTag() {\n      const name = window.prompt(\'请输出标签名\');\n      if (name) {\n        const message = tagListModel.create(name);\n        if (message === \'duplicated\') {\n          window.alert(\'标签名重复了\');\n        } else if (message === \'success\') {\n          window.alert(\'添加成功\');\n        }\n      }\n    }\n')])])]),e("h2",{attrs:{id:"修改标签的数据类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#修改标签的数据类型"}},[t._v("#")]),t._v(" 修改标签的数据类型")]),t._v(" "),e("p",[t._v("data（tagList）最好是一个"),e("code",[t._v("{id：string,name:string}[]")]),t._v("因为会涉及到删除标签的功能，必须要找到这个内容才能删除,重构所有用到data的地方")]),t._v(" "),e("h2",{attrs:{id:"标签的点击跳转"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#标签的点击跳转"}},[t._v("#")]),t._v(" 标签的点击跳转")]),t._v(" "),e("p",[t._v("当点击标签时跳转到标签编辑页面，首先要有一个标签的编辑页面的组件，然后给它添加路径.")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("import EditLabel from '@/views/EditLabel.vue';\n {\n   path: '/labels/edit',\n   component: EditLabel\n },\n 新建EditLabel.vue组件\n <template>\n <Layout>\n   编辑标签\n </Layout>\n</template>\n\n<script lang=\"ts\">\n import Vue from 'vue';\n import {Component} from 'vue-property-decorator';\n @Component\n export default class EditLabel extends Vue {\n }\n<\/script>\n\n<style lang=\"scss\" scoped>\n</style> \n")])])]),e("h2",{attrs:{id:"动态路由"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#动态路由"}},[t._v("#")]),t._v(" 动态路由")]),t._v(" "),e("p",[t._v("在标签编辑页面我们希望拿到我们点击跳转页面的那个标签的相关信息，比如标签名呀，id这类的信息，以便于后面的标签名的修改，删除等操作，通过vue-router我们可以成功做到。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v(' {path: \'/labels/edit/:id\',\n    component: EditLabel}\n    页面跳转时\n      <div class="tags">\n      <router-link class="tag"\n                   v-for="tag in tags" :key="tag.id"\n                   :to="`/labels/edit/${tag.id}`">\n        <span>{{tag.name}}</span>\n        <Icon name="right"/>\n      </li>\n    </ol>\n      </router-link>\n    </div>\n    然后EditLabel.vue里\n    export default class EditLabel extends Vue {\n    created() {\n      const id = this.$route.params.id;\n      tagListModel.fetch();\n      const tags = tagListModel.data;\n      const tag = tags.filter(t => t.id === id)[0];\n      if (tag) {\n        console.log(tag);\n      } else {\n        this.$router.replace(\'/404\');\n      }\n    }}\n')])])])])}),[],!1,null,null,null);a.default=s.exports}}]);