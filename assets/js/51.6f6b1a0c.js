(window.webpackJsonp=window.webpackJsonp||[]).push([[51],{360:function(t,e,s){"use strict";s.r(e);var a=s(42),n=Object(a.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h3",{attrs:{id:"统计页面的制作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#统计页面的制作"}},[t._v("#")]),t._v(" 统计页面的制作")]),t._v(" "),s("p",[t._v("1.修改Types.vue,让统计页面也是可以使用这个组件，由于统计页面里面这组件当选中的时候不仅下面有黑色小横条，并且选框的颜色需要改变，但是在记账页面又不需要颜色改变，我们可以对这个组件进行二次封装，在使用Types.vue组件的statistics.vue组价里面给Type.vue组件再加类名来修改样式，为了能够给Types.vue组件里面的元素加上样式我们需要用到vue的deep属性")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v(" .x::v-deep .li {\n    background: white;\n    &.selected {\n      background: #C4C4C4;\n      &::after {\n        display: none;\n      }\n    }\n  }\n")])])]),s("p",[t._v("由于可能Types.vue组件里面的li元素可能比较多并且复杂的话，最好是传个前缀进去，然后定位会更加准确。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('<ul class="types">\n     <li :class="{[classPrefix+\'-item\']: classPrefix, selected: value===\'-\'}"\n         @click="selectType(\'-\')">支出\n     </li>\n     <li :class="{[classPrefix+\'-item\']: classPrefix, selected: value===\'+\'}"\n         @click="selectType(\'+\')">收入\n     </li>\n   </ul>\n     \n   @Prop(String) readonly value!: string;\n   @Prop(String) classPrefix?: string;\nstatistics.vue组件这样使用\n <Types class-prefix="type" :data-source="typeList" :value.sync="type"/>\n::v-deep .type-tabs-item {\n   background: white;\n   &.selected {\n     background: #C4C4C4;\n     &::after {\n       display: none;\n     }\n   }\n }\n  \n')])])]),s("ol",{attrs:{start:"2"}},[s("li",[t._v("由于设计稿中出现了一个按天 按周 按月的一个导航条，它的样式和上面的支出与收入的类型基本上一样，考虑进一步修改Types.vue组件，让他变得更加的通用，改动太多，直接重建一个叫做Tabs.vue组件，然后将Types.vue里面的有用的代码抄过来，然后开始编辑这个Tabs.vue变得更加通用，具体看文件Tabs.vue，给一个"),s("code",[t._v("@Prop({required: true, type: Array}) dataSource!: DataSourceItem[];")]),t._v(",然后将所有用到Types.vue的组件的地方全都修改成引入Tabs.vue,由于dataSource里面的 "),s("code",[t._v("typeList = [ {text: '支出', value: '-'}, {text: '收入', value: '+'}, ];")]),t._v("会多次使用，根据我与重复不共戴天原理，所以直接将其单独提出里更好，再src目录下新建一个叫做constant（常量）目录，新建一个叫做typeList.ts文件")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("    export default Object.freeze([\n  {text: '支出', value: '-'},\n  {text: '收入', value: '+'},\n]);//freeze的意思是只能读不允许修改\n   \n")])])]),s("ol",{attrs:{start:"3"}},[s("li",[t._v("引用Tabs.vue时候由于高度不同，需要在在引用这个组件里面传前缀来通过css修改这个高度，有时候会失败，这是因为选择器的优先级原因，要么提高引用组件时的css权重，或是降低组件自身在写css的样式的权重。在提供一条思路，就是选择用js来控制这个高度，")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v(' <ul class="tabs" :class="{[classPrefix+\'-tabs\']: classPrefix}" :style="{height:height}">\n    <li v-for="item in dataSource" :key="item.value" class="tabs-item"\n        :class="liClass(item)" @click="select(item)">{{item.text}}\n    </li>\n  </ul>\n@Prop({type: String, default: \'64px\'})\n    height!: string;\n    \n')])])]),s("ol",{attrs:{start:"4"}},[s("li",[t._v("书写statistics.vue的页面内容，完成列表的内容，首先我们可以拿到recordList,这是一个数组，他是一个")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v(" RecordItem = {\n  tags: string[]\n  notes: string\n  type: string\n  amount: number // 数据类型 object | string\n  createdAt?: Date  // 类 / 构造函数\n}\n")])])]),s("p",[t._v("由于通过this.$store来取这个recordList的时候，它的类型会变成一个any,所以当我们拿到这个recordList的时候，我们需要自己断言一下这是个recordItem类型，")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("get recordList() {\n      return (this.$store.state as RootState).recordList;\n    }\n")])])]),s("p",[t._v("但是当我们从localStroge取出这个recordList的时候，JSON.parse并不识别Date类型，所以我们需要将createAt的类型修改一下，变成一个string，这就使得将有createAt的地方修改一下， "),s("code",[t._v("record2.createdAt = new Date().toISOString()")]),t._v(";")]),t._v(" "),s("ol",{attrs:{start:"4"}},[s("li",[t._v("拿到recordList以后，我们需要将这个数组做成我们需要的结构类似于下面这种,然后就开始写css样式")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('   <li v-for="(group,index) in result" :key="index">\n        <h3 class="title">{{group.title}}</h3>\n        <ol>\n          <li v-for="item in group.items" :key="item.id"\n              class="record"\n          >\n            <span>{{tagString(item.tags)}}</span>\n            <span class="notes">{{item.notes}}</span>\n            <span>￥{{item.amount}} </span>\n          </li>\n        </ol>\n      </li>\n  get result() {\n      const {recordList} = this;\n      type HashTableValue = { title: string, items: RecordList }\n      const hashTable: { [key: string]: HashTableValue } = {};\n      for (let i = 0; i < recordList.length; i++) {\n        const [date, time] = recordList[i].createdAt!.split(\'T\');\n        hashTable[date] = hashTable[date] || {title: date, items: []};\n        hashTable[date].items.push(recordList[i]);\n      }\n      return hashTable;\n    }\n')])])]),s("ol",{attrs:{start:"5"}},[s("li",[t._v("关于时间的概念，知识总结。")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("    let day=new Date()//得到一个事件\n    console.log(day)//Wed Aug 12 2020 16:22:13 GMT+0800 (中国标准时间)\n    day.toISOString()//\"2020-08-12T08:22:13.036Z\"\n    Date.parse(\"2020-08-12T08:22:13.036Z\")//1597220533036\n    new Date(1597220533036)//Wed Aug 12 2020 16:22:13 GMT+0800 (中国标准时间)\n    new Date(1597220533036).getHours()//16\n    ```\n    使用dayjs,采用crm学习法。首先进入官网然后安装，开始使用,以后还有什么需要学习的就自己去搜索\n    ```\n      import dayjs from 'dayjs';\n       beautify(string: string) {\n      const now = new Date();//也可以是const now=dayjs()\n      if (dayjs(string).isSame(now, 'day')) {\n        return '今天';\n      } else if (dayjs(string).isSame((now.valueOf() - 86400 * 1000), 'day')) {\n        return '昨天';\n      } else if (dayjs(string).isSame(dayjs().subtract(2, 'day'), 'day')) {\n        return '前天';\n      } else if (dayjs(string).isSame(now, 'year')) {\n        return dayjs(string).format('M月D日');\n      } else {\n        return dayjs(string).format('yyyy年MM月DD日');\n      }\n    }\n")])])]),s("ol",{attrs:{start:"6"}},[s("li",[t._v("为了让在统计页面显示的数据是有序的，今天，昨天，前天，与更早的时间，我么需要在得到hashTable之前就将这个recordList排好序")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("     function clone<T>(data: T): T{\n    return JSON.parse(JSON.stringify(data))\n       }//上述中的三个T分别代表着 第一个声明一个T类型，第二个data的类型为T,第三个为返回值类型为T\n  \n export default clone\n   const newList = clone(recordList).sort((a, b) =>  dayjs(b.createdAt).valueOf() - dayjs(a.createdAt).valueOf())\n")])])]),s("ol",{attrs:{start:"7"}},[s("li",[t._v("然后开始改造hashTable，使他变成一个数组")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('   const hashTable: HashTable = [{title: dayjs(newList[0].createdAt).format(\'YYYY-MM-DD\'), items: [newList[0]]}];\n    for (let i = 1; i < newList.length; i++) {\n      const current = newList[i];\n      const last = hashTable[hashTable.length - 1];\n      if (dayjs(current.createdAt).isSame(dayjs(last.title), \'day\')) {\n        last.items.push(current);\n      } else {\n        hashTable.push({title: dayjs(current.createdAt).format(\'YYYY-MM-DD\'), items: [current]});\n      }\n      上面样式也得改动\n       <ol>\n    <li v-for="(group,index) in groupList" :key="index">\n      <h3 class="title">\n        {{beautify(group.title)}}<span>{{group.total}}</span>\n      </h3>\n      <ol>\n        <li v-for="item in group.items" :key="item.id"\n            class="record">\n          <span>{{tagString(item.tags)}}</span>\n          <span class="notes">{{item.notes}}</span>\n          <span>￥{{item.amount}} </span>\n        </li>\n      </ol>\n    </li>\n   </ol>                                                                                              \n')])])]),s("ol",{attrs:{start:"8"}},[s("li",[t._v("页面最好是每天的花费再做一个统计总额度,")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("   type HashTable={\n   title: string;\n   total?: number;\n   items: RecordList;\n    }[ ]//声明类型\n     hashTable.map(group => {\n        group.total = group.items.reduce((sum, item) => {return sum + item.amount;}, 0);\n      });\n")])])])])}),[],!1,null,null,null);e.default=n.exports}}]);