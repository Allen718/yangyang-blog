(window.webpackJsonp=window.webpackJsonp||[]).push([[54],{374:function(t,n,e){"use strict";e.r(n);var a=e(42),s=Object(a.a)({},(function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"统计页面数据可视化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#统计页面数据可视化"}},[t._v("#")]),t._v(" 统计页面数据可视化")]),t._v(" "),e("h3",{attrs:{id:"为记账页面添加时间"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#为记账页面添加时间"}},[t._v("#")]),t._v(" 为记账页面添加时间")]),t._v(" "),e("p",[t._v("先前是哪一天记账就默认数据是那一天，为了使得记账的时间选择更加灵活，给记账页面在添加一个时间选择的功能，由于时间选择和记账页面的备注的板块十分类似，改造一下备注模块组件，使他也能为记账时间板块所用")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('<template>\n  <div>\n    <label class="notes">\n      <span class="name">{{this.fieldName}}</span>\n      <template v-if="type===\'date\'">\n        <input :type="type" :placeholder="this.placeholder"\n               :value="x(value)"\n               @input="onValueChanged($event.target.value)"\n              >\n      </template>\n      <template v-else >\n        <input :type="type" :placeholder="this.placeholder"\n               :value="value"\n               @blur="onValueChanged($event.target.value)">\n      </template>\n    </label>\n  </div>\n</template>\n x(isoString: string) {\n      return dayjs(isoString).format(\'YYYY-MM-DD\');\n    }\n    onValueChanged(value: string) {\n      this.$emit(\'update:value\', value);\n  }\n')])])]),e("p",[t._v("当props的type为日期类型就处理一下这个数据，当日期变化，传递给外面，记录下来，记账的时候就记录好记账日期，后面的记账数据处理中不需要再有记账日期的创建了。")]),t._v(" "),e("h3",{attrs:{id:"引入图表"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#引入图表"}},[t._v("#")]),t._v(" 引入图表")]),t._v(" "),e("ol",[e("li",[t._v("使用命令"),e("code",[t._v("npm install echarts --save")]),t._v(","),e("code",[t._v("npm install @types/echarts")]),t._v(",安装echarts。")]),t._v(" "),e("li",[t._v("新建一个叫做Echats的组件，然后根据官网的示例，options通过外部传入，成功的使得我们能够在页面可以看见图表就成功了")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('<template>\n  <div ref="chartsWrapper" class="EchartsWrapper">\n  </div>\n</template>\n<script lang="ts">\n  import {Component, Prop,Vue,Watch} from \'vue-property-decorator\';\n  import echarts from \'echarts\';\n  @Component\n  export default class Echart extends Vue {\n     @Prop()options?: EChartOption\n    mounted(){\n      if (this.options === undefined) {\n        return console.error(\'options 为空\');\n      }else{\n        let chart = echarts.init(this.$refs.chartsWrapper as HTMLDivElement);\n        this.chart.setOption(this.options)\n      }\n\n    }\n  }\n<\/script>\n<style lang="scss" scoped>\n  .EchartsWrapper{\n    width: 100%;\n    height:40vh;\n  }\n</style>\n')])])]),e("ol",{attrs:{start:"3"}},[e("li",[t._v("更改图表的样式，将纵坐标的纵轴去除，横坐标的的刻度对齐等一些细节的完善，这些设置都是查echarts的官网里关于术语速查手册可以看见，自己摸索的更改就可以实现。")]),t._v(" "),e("li",[t._v("关于数据显示的多少，如果要展示一个月的话，如果让所有数据都出现在一屏的话，会十分的小，体验感不够好，故我们设计一屏幕放七天左右的数据足矣，")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v(" .echartsWrapper {\n    overflow: auto;\n\n    &::-webkit-scrollbar {\n      display: none\n    }\n\n    > div {\n      width: 430%;\n      min-height: 40vh;\n    }\n  }\n")])])]),e("ol",{attrs:{start:"5"}},[e("li",[t._v("处理数据，图表的样式调整好，我们就可以筛选我们的数据，使用统计页面的数据，将拿到的数据按照我们的需求处理好就可以。关于里面使用的'_'这是引入的loadash,原生js中对于数组的处理十分的友好的")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v(" get dataSource() {\n      const today = dayjs().format('YYYY-MM-DD');\n      const array = [];\n      for (let i = 0; i <= 28; i++) {\n        const date = dayjs(today).subtract(i, 'day').format('YYYY-MM-DD');\n       const found=  _.find(this.groupList,  {\n          title:date\n        });\n        array.push({\n         date: date, value: found ? found.total : 0\n        });\n\n      }\n      array.sort((a, b) => {\n        if (a.date > b.date) {return 1;} else if (a.date === b.date) {return 0;} else {return -1;}\n      });\n      return array;\n    }\n     get options() {\n      const keys = this.dataSource.map(item => item.date);\n      const values = this.dataSource.map(item => item.value);\n      return {\n        grid: {\n          left: 0,\n          right: 0\n        },\n        tooltip: {\n          show: true,\n          formatter: '{c}',\n          position: 'top',\n          backgroundColor: '#1F01FF'\n        },\n        xAxis: {\n          type: 'category',\n          axisLabel: {\n            formatter: function (value: string, index: number) {\n              return value.substr(5);\n            }\n\n          },\n          axisTick: {\n            alignWithLabel: true\n          },\n          data: keys,\n        },\n        yAxis: {\n          type: 'value',\n          show: false,\n        },\n        series: [{\n          symbolSize: 15,\n          symbol: 'circle',\n          itemStyle: {\n            color: '#1F01FF',\n          },\n          data: values,\n          type: 'line'\n        },\n        ],\n\n      };\n\n    }\n\n")])])]),e("ol",{attrs:{start:"6"}},[e("li",[t._v("图表基本上添加完成，但是还存在一些小问题就是当点击收入的时候图表没有切换，根据数据已经改变了，图表却没有改变，通过Log调试大法，发现原来是由于图表组件中关于渲染的方法有问题,不应该在mounted初始化并挂载，而是一旦这个options改变就初始化并渲染。")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v(" @Prop()options?: EChartOption\n    @Watch('options')\n    onOptionsChanged(val: EChartOption) {\n        this.chart!.setOption(val);\n\n    }\n    mounted(){\n      if (this.options === undefined) {\n        return console.error('options 为空');\n      }else{\n        this.chart = echarts.init(this.$refs.chartsWrapper as HTMLDivElement);\n        this.chart.setOption(this.options)\n      }\n\n    }\n")])])])])}),[],!1,null,null,null);n.default=s.exports}}]);